import{_ as i,c as t,o as a,ak as e}from"./chunks/framework.DaqVj_Bu.js";const r=JSON.parse('{"title":"MQTT 协议规范","description":"","frontmatter":{},"headers":[],"relativePath":"orbitcontrol/tech-spec/api/mqtt_convention.md","filePath":"orbitcontrol/tech-spec/api/mqtt_convention.md"}'),n={name:"orbitcontrol/tech-spec/api/mqtt_convention.md"};function l(d,s,h,p,o,k){return a(),t("div",null,s[0]||(s[0]=[e(`<h1 id="mqtt-协议规范" tabindex="-1">MQTT 协议规范 <a class="header-anchor" href="#mqtt-协议规范" aria-label="Permalink to &quot;MQTT 协议规范&quot;">​</a></h1><h2 id="topic-命名规范" tabindex="-1">Topic 命名规范 <a class="header-anchor" href="#topic-命名规范" aria-label="Permalink to &quot;Topic 命名规范&quot;">​</a></h2><ol><li>使用层级结构，采用斜杠 <code>/</code> 分隔，层级表达逻辑关系：<div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;实体类型&gt;/&lt;实体ID&gt;/&lt;消息类型&gt;</span></span></code></pre></div></li><li>广播消息，使用 <code>scope</code> 进行区分，例如： <ul><li>broadcast/all/update</li><li>broadcast/group-A/ota</li></ul></li><li>消息响应机制 <ul><li>MQTT 本身无响应机制，使用 <code>ack</code> 以示区分：<code>device/{device_id}/register/ack</code></li><li>消息中加入 <code>msg_id</code> 字段进行匹配：<div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;msg_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;uuid-456&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;status&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,                  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 错误时，提供具体错误码</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error message.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul></li></ol><p>例如：</p><table tabindex="0"><thead><tr><th>Topic 示例</th><th>描述</th></tr></thead><tbody><tr><td><code>device/001/status</code></td><td>设备 <code>001</code> 上报状态</td></tr><tr><td><code>device/001/telemetry</code></td><td>设备 <code>001</code> 上报遥测数据</td></tr><tr><td><code>device/001/cmd</code></td><td>平台向设备 <code>001</code> 下发命令</td></tr><tr><td><code>device/+/status</code></td><td>平台订阅所有设备状态</td></tr><tr><td><code>broadcast/all/ota</code></td><td>平台广播信息</td></tr></tbody></table><p>MQTT 标准 不支持 <code>{}</code> 占位符，需使用 <code>显式路径</code>， 通配符仅用于订阅：</p><table tabindex="0"><thead><tr><th>通配符</th><th>用法</th><th>示例</th></tr></thead><tbody><tr><td><code>+</code></td><td>匹配单层级</td><td><code>device/+/status</code></td></tr><tr><td><code>#</code></td><td>匹配多层级</td><td><code>device/#</code></td></tr></tbody></table><h2 id="消息体格式" tabindex="-1">消息体格式 <a class="header-anchor" href="#消息体格式" aria-label="Permalink to &quot;消息体格式&quot;">​</a></h2><p>采用结构化 <code>JSON</code> 作为消息体，包含元信息字段：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;msg_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;uuid-456&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,                 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 消息ID，仅使用与需要Ack的消息</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;timestamp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2025-07-18T03:15:00Z&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 时间戳</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {                             </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 业务数据</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;device_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;001&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;battery&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">89</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;gps&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">114.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;status&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;OK&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,10)]))}const E=i(n,[["render",l]]);export{r as __pageData,E as default};
